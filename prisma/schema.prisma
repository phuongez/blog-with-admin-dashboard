generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  AUTHOR
  USER
}

model User {
  id             String             @id @default(cuid())
  clerkUserId    String             @unique
  email          String             @unique
  name           String
  imageUrl       String?
  role           Role               @default(USER)
  createdAt      DateTime           @default(now())

  articles       Articles[]
  comments       Comment[]
  likes          Like[]
  purchases      ArticlePurchase[]
  savedArticles  SavedArticle[]
  transactions   TransactionLog[]
}

model Articles {
  id             String             @id @default(cuid())
  title          String
  slug           String             @unique
  subtitle       String?
  content        String
  category       String
  featuredImage  String
  createdAt      DateTime           @default(now())
  showToc        Boolean            @default(false)
  isPaid         Boolean            @default(false)
  price          Int?

  author         User               @relation(fields: [authorId], references: [id])
  authorId       String

  comments       Comment[]
  likes          Like[]
  purchases      ArticlePurchase[]
  savedByUsers   SavedArticle[]
  transactions   TransactionLog[]
}

model Comment {
  id             String     @id @default(cuid())
  body           String
  createdAt      DateTime   @default(now())

  article        Articles   @relation(fields: [articleId], references: [id])
  articleId      String

  author         User       @relation(fields: [authorId], references: [id])
  authorId       String
}

model Like {
  id             String     @id @default(cuid())
  isLiked        Boolean    @default(false)
  createdAt      DateTime   @default(now())

  user           User       @relation(fields: [userId], references: [id])
  userId         String

  article        Articles   @relation(fields: [articleId], references: [id])
  articleId      String

  @@unique([userId, articleId])
}

model ArticlePurchase {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  priceAtPurchase  Int

  user             User       @relation(fields: [userId], references: [id])
  userId           String

  article          Articles   @relation(fields: [articleId], references: [id])
  articleId        String

  @@unique([userId, articleId], name: "userId_articleId")
}

model SavedArticle {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())

  user             User       @relation(fields: [userId], references: [id])
  userId           String

  article          Articles   @relation(fields: [articleId], references: [id])
  articleId        String

  @@unique([userId, articleId])
}

model TransactionLog {
  id               String     @id @default(cuid())
  content          String
  amount           Int
  createdAt        DateTime   @default(now())

  user             User       @relation(fields: [userId], references: [id])
  userId           String

  article          Articles   @relation(fields: [articleId], references: [id])
  articleId        String
}
