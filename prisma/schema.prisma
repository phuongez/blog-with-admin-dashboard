generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  clerkUserId   String            @unique
  email         String            @unique
  name          String
  imageUrl      String?
  role          Role              @default(USER)
  createdAt     DateTime          @default(now())
  bio           String?
  purchases     ArticlePurchase[]
  articles      Articles[]
  comments      Comment[]
  likes         Like[]
  savedArticles SavedArticle[]
  transactions  TransactionLog[]
  notifications Notification[]    @relation("UserNotifications")
}

model Articles {
  id            String            @id @default(cuid())
  title         String
  content       String
  category      String
  featuredImage String
  authorId      String
  createdAt     DateTime          @default(now())
  isPaid        Boolean           @default(false)
  price         Int?
  subtitle      String?
  slug          String            @unique
  showToc       Boolean           @default(false)
  purchases     ArticlePurchase[]
  author        User              @relation(fields: [authorId], references: [id])
  comments      Comment[]
  likes         Like[]
  savedByUsers  SavedArticle[]
  transactions  TransactionLog[]
  notifications Notification[]
}

model Comment {
  id        String    @id @default(cuid())
  body      String
  articleId String
  authorId  String
  parentId  String?   // cho phép trả lời
  createdAt DateTime  @default(now())
  article   Articles  @relation(fields: [articleId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentToParent", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentToParent")
  notifications Notification[]
}

model Notification {
  id         String   @id @default(cuid())
  type       String   // 'comment' | 'reply'
  userId     String   // người nhận
  articleId  String
  commentId  String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], name: "UserNotifications")
  comment    Comment  @relation(fields: [commentId], references: [id])
  article    Articles @relation(fields: [articleId], references: [id]) // ✅ Thêm dòng này
}


model Like {
  id        String   @id @default(cuid())
  isLiked   Boolean  @default(false)
  userId    String
  articleId String
  createdAt DateTime @default(now())
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
}

model ArticlePurchase {
  id              String   @id @default(cuid())
  userId          String
  articleId       String
  createdAt       DateTime @default(now())
  priceAtPurchase Int
  article         Articles @relation(fields: [articleId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId], name: "userId_articleId")
}

model SavedArticle {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
}

model TransactionLog {
  id        String   @id @default(cuid())
  content   String
  amount    Int
  createdAt DateTime @default(now())
  articleId String
  userId    String
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  AUTHOR
  USER
  BANNED
}
