generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(cuid())
  clerkUserId    String               @unique
  email          String               @unique
  name           String
  imageUrl       String?
  role           Role                 @default(USER)
  createdAt      DateTime             @default(now())
  bio            String?
  purchases      ArticlePurchase[]
  articles       Articles[]
  comments       Comment[]
  likes          Like[]
  savedArticles  SavedArticle[]
  transactions   TransactionLog[]
  notifications  Notification[]       @relation("UserNotifications")
  fitnessHistory UserProfileHistory[]
}

model UserProfileHistory {
  id        String   @id @default(uuid())
  userId    String
  gender    String
  weight    Int
  height    Int
  age       Int
  bodyfat   Float
  activity  Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Articles {
  id            String            @id @default(cuid())
  title         String
  content       String
  category      String
  featuredImage String
  authorId      String
  createdAt     DateTime          @default(now())
  isPaid        Boolean           @default(false)
  price         Int?
  subtitle      String?
  slug          String            @unique
  showToc       Boolean           @default(false)
  purchases     ArticlePurchase[]
  author        User              @relation(fields: [authorId], references: [id])
  comments      Comment[]
  likes         Like[]
  savedByUsers  SavedArticle[]
  transactions  TransactionLog[]
  notifications Notification[]
}

model Comment {
  id            String         @id @default(cuid())
  body          String
  articleId     String
  authorId      String
  parentId      String? // cho phép trả lời
  createdAt     DateTime       @default(now())
  article       Articles       @relation(fields: [articleId], references: [id])
  author        User           @relation(fields: [authorId], references: [id])
  parent        Comment?       @relation("CommentToParent", fields: [parentId], references: [id])
  replies       Comment[]      @relation("CommentToParent")
  notifications Notification[]
}

model Notification {
  id        String   @id @default(cuid())
  type      String // 'comment' | 'reply'
  userId    String // người nhận
  articleId String
  commentId String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], name: "UserNotifications")
  comment Comment  @relation(fields: [commentId], references: [id])
  article Articles @relation(fields: [articleId], references: [id]) // ✅ Thêm dòng này
}

model Like {
  id        String   @id @default(cuid())
  isLiked   Boolean  @default(false)
  userId    String
  articleId String
  createdAt DateTime @default(now())
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
}

model ArticlePurchase {
  id              String   @id @default(cuid())
  userId          String
  articleId       String
  createdAt       DateTime @default(now())
  priceAtPurchase Int
  article         Articles @relation(fields: [articleId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId], name: "userId_articleId")
}

model SavedArticle {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
}

model TransactionLog {
  id        String   @id @default(cuid())
  content   String
  amount    Int
  createdAt DateTime @default(now())
  articleId String
  userId    String
  article   Articles @relation(fields: [articleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model MealPlan {
  id        String   @id @default(uuid())
  userId    String
  name      String // ví dụ: "Thực đơn tăng cân 01"
  createdAt DateTime @default(now())

  meals Meal[] // liên kết đến nhiều bữa
}

model Meal {
  id         String     @id @default(uuid())
  mealPlan   MealPlan   @relation(fields: [mealPlanId], references: [id])
  mealPlanId String
  title      String // ví dụ: "Bữa sáng"
  items      MealItem[]
}

model MealItem {
  id      String @id @default(uuid())
  meal    Meal   @relation(fields: [mealId], references: [id])
  mealId  String
  name    String
  amount  String
  protein Float
  carb    Float
  fat     Float
  fiber   Float
}

model Food {
  id       String @id @default(uuid())
  name     String
  group    String
  unit     String // ⬅ thêm dòng này
  protein  Float
  carb     Float
  fat      Float
  fiber    Float
  calories Float?
}

enum Role {
  ADMIN
  AUTHOR
  USER
  BANNED
}
